   1              		.cpu cortex-m0
   2              		.fpu softvfp
   3              		.eabi_attribute 20, 1
   4              		.eabi_attribute 21, 1
   5              		.eabi_attribute 23, 3
   6              		.eabi_attribute 24, 1
   7              		.eabi_attribute 25, 1
   8              		.eabi_attribute 26, 1
   9              		.eabi_attribute 30, 6
  10              		.eabi_attribute 34, 0
  11              		.eabi_attribute 18, 4
  12              		.code	16
  13              		.file	"TFC_Servo.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.global	__aeabi_fdiv
  18              		.section	.text.TFC_SetSteeringAngle,"ax",%progbits
  19              		.align	2
  20              		.global	TFC_SetSteeringAngle
  21              		.code	16
  22              		.thumb_func
  24              	TFC_SetSteeringAngle:
  25              	.LFB0:
  26              		.file 1 "../Sources/TFC/TFC_Servo.c"
   1:../Sources/TFC/TFC_Servo.c **** #include "TFC\TFC.h"
   2:../Sources/TFC/TFC_Servo.c **** 
   3:../Sources/TFC/TFC_Servo.c **** 
   4:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLOCK                                                                  (CORE_CLOCK)
   5:../Sources/TFC/TFC_Servo.c **** #define FTM1_CLK_PRESCALE                                  						     6// Prescale Selector value -
   6:../Sources/TFC/TFC_Servo.c **** #define FTM1_OVERFLOW_FREQUENCY 50  // Desired Frequency of PWM Signal - Here 50Hz => 20ms period
   7:../Sources/TFC/TFC_Servo.c **** // use these to dial in servo steering to your particular servo
   8:../Sources/TFC/TFC_Servo.c **** #define SERVO_MIN_DUTY_CYCLE                                          (float)(.0010*FTM1_OVERFLOW_F
   9:../Sources/TFC/TFC_Servo.c **** #define SERVO_MAX_DUTY_CYCLE                                         (float)(.0020*FTM1_OVERFLOW_FR
  10:../Sources/TFC/TFC_Servo.c **** /**********************************************************************************************/
  11:../Sources/TFC/TFC_Servo.c **** 
  12:../Sources/TFC/TFC_Servo.c **** // turns the car to a particular angle, -MAX_ANGLE <= angle <= MAX_ANGLE
  13:../Sources/TFC/TFC_Servo.c **** void TFC_SetSteeringAngle(float angle)
  14:../Sources/TFC/TFC_Servo.c **** {
  27              		.loc 1 14 0
  28              		.cfi_startproc
  29 0000 80B5     		push	{r7, lr}
  30              	.LCFI0:
  31              		.cfi_def_cfa_offset 8
  32              		.cfi_offset 7, -8
  33              		.cfi_offset 14, -4
  34 0002 82B0     		sub	sp, sp, #8
  35              	.LCFI1:
  36              		.cfi_def_cfa_offset 16
  37 0004 00AF     		add	r7, sp, #0
  38              	.LCFI2:
  39              		.cfi_def_cfa_register 7
  40 0006 7860     		str	r0, [r7, #4]
  15:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServo(0, angle / MAX_ANGLE);
  41              		.loc 1 15 0
  42 0008 7868     		ldr	r0, [r7, #4]
  43 000a 0549     		ldr	r1, .L2
  44 000c FFF7FEFF 		bl	__aeabi_fdiv
  45 0010 031C     		add	r3, r0, #0
  46 0012 0020     		mov	r0, #0
  47 0014 191C     		add	r1, r3, #0
  48 0016 FFF7FEFF 		bl	TFC_SetServo
  16:../Sources/TFC/TFC_Servo.c **** }
  49              		.loc 1 16 0
  50 001a BD46     		mov	sp, r7
  51 001c 02B0     		add	sp, sp, #8
  52              		@ sp needed for prologue
  53 001e 80BD     		pop	{r7, pc}
  54              	.L3:
  55              		.align	2
  56              	.L2:
  57 0020 00003442 		.word	1110704128
  58              		.cfi_endproc
  59              	.LFE0:
  61              		.global	__aeabi_f2d
  62              		.global	__aeabi_dadd
  63              		.global	__aeabi_ddiv
  64              		.global	__aeabi_dmul
  65              		.global	__aeabi_d2f
  66              		.section	.text.TFC_SetServo,"ax",%progbits
  67              		.align	2
  68              		.global	TFC_SetServo
  69              		.code	16
  70              		.thumb_func
  72              	TFC_SetServo:
  73              	.LFB1:
  17:../Sources/TFC/TFC_Servo.c **** 
  18:../Sources/TFC/TFC_Servo.c **** // Position is -1.0 to 1.0.   Use SERVO_X_MIN_DUTY_CYCLE and SERVO_MAX_DUTY_CYCLE  to calibrate the
  19:../Sources/TFC/TFC_Servo.c **** void TFC_SetServo(uint8_t ServoNumber, float Position)
  20:../Sources/TFC/TFC_Servo.c **** {
  74              		.loc 1 20 0
  75              		.cfi_startproc
  76 0000 90B5     		push	{r4, r7, lr}
  77              	.LCFI3:
  78              		.cfi_def_cfa_offset 12
  79              		.cfi_offset 4, -12
  80              		.cfi_offset 7, -8
  81              		.cfi_offset 14, -4
  82 0002 83B0     		sub	sp, sp, #12
  83              	.LCFI4:
  84              		.cfi_def_cfa_offset 24
  85 0004 00AF     		add	r7, sp, #0
  86              	.LCFI5:
  87              		.cfi_def_cfa_register 7
  88 0006 021C     		mov	r2, r0
  89 0008 3960     		str	r1, [r7]
  90 000a FB1D     		add	r3, r7, #7
  91 000c 1A70     		strb	r2, [r3]
  21:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServoDutyCycle(ServoNumber , 
  22:../Sources/TFC/TFC_Servo.c **** 			(((Position + 1.0)/2)*(SERVO_MAX_DUTY_CYCLE - SERVO_MIN_DUTY_CYCLE))+SERVO_MIN_DUTY_CYCLE);
  92              		.loc 1 22 0
  93 000e 3868     		ldr	r0, [r7]
  94 0010 FFF7FEFF 		bl	__aeabi_f2d
  95 0014 031C     		mov	r3, r0
  96 0016 0C1C     		mov	r4, r1
  97 0018 181C     		mov	r0, r3
  98 001a 211C     		mov	r1, r4
  99 001c 174B     		ldr	r3, .L5+4
 100 001e 164A     		ldr	r2, .L5
 101 0020 FFF7FEFF 		bl	__aeabi_dadd
 102 0024 031C     		mov	r3, r0
 103 0026 0C1C     		mov	r4, r1
 104 0028 181C     		mov	r0, r3
 105 002a 211C     		mov	r1, r4
 106 002c 144A     		ldr	r2, .L5+8
 107 002e 154B     		ldr	r3, .L5+12
 108 0030 FFF7FEFF 		bl	__aeabi_ddiv
 109 0034 031C     		mov	r3, r0
 110 0036 0C1C     		mov	r4, r1
 111 0038 181C     		mov	r0, r3
 112 003a 211C     		mov	r1, r4
 113 003c 124A     		ldr	r2, .L5+16
 114 003e 134B     		ldr	r3, .L5+20
 115 0040 FFF7FEFF 		bl	__aeabi_dmul
 116 0044 031C     		mov	r3, r0
 117 0046 0C1C     		mov	r4, r1
 118 0048 181C     		mov	r0, r3
 119 004a 211C     		mov	r1, r4
 120 004c 0E4A     		ldr	r2, .L5+16
 121 004e 0F4B     		ldr	r3, .L5+20
 122 0050 FFF7FEFF 		bl	__aeabi_dadd
 123 0054 031C     		mov	r3, r0
 124 0056 0C1C     		mov	r4, r1
  21:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServoDutyCycle(ServoNumber , 
 125              		.loc 1 21 0
 126 0058 181C     		mov	r0, r3
 127 005a 211C     		mov	r1, r4
 128 005c FFF7FEFF 		bl	__aeabi_d2f
 129 0060 031C     		add	r3, r0, #0
 130 0062 FA1D     		add	r2, r7, #7
 131 0064 1278     		ldrb	r2, [r2]
 132 0066 101C     		mov	r0, r2
 133 0068 191C     		add	r1, r3, #0
 134 006a FFF7FEFF 		bl	TFC_SetServoDutyCycle
  23:../Sources/TFC/TFC_Servo.c **** }
 135              		.loc 1 23 0
 136 006e BD46     		mov	sp, r7
 137 0070 03B0     		add	sp, sp, #12
 138              		@ sp needed for prologue
 139 0072 90BD     		pop	{r4, r7, pc}
 140              	.L6:
 141 0074 C046C046 		.align	3
 142              	.L5:
 143 0078 00000000 		.word	0
 144 007c 0000F03F 		.word	1072693248
 145 0080 00000000 		.word	0
 146 0084 00000040 		.word	1073741824
 147 0088 000000A0 		.word	-1610612736
 148 008c 9999A93F 		.word	1068079513
 149              		.cfi_endproc
 150              	.LFE1:
 152              		.global	__aeabi_ui2f
 153              		.global	__aeabi_fmul
 154              		.global	__aeabi_f2uiz
 155              		.section	.text.TFC_SetServoDutyCycle,"ax",%progbits
 156              		.align	2
 157              		.global	TFC_SetServoDutyCycle
 158              		.code	16
 159              		.thumb_func
 161              	TFC_SetServoDutyCycle:
 162              	.LFB2:
  24:../Sources/TFC/TFC_Servo.c **** 
  25:../Sources/TFC/TFC_Servo.c **** void TFC_SetServoDutyCycle(uint8_t ServoNumber, float DutyCycle)
  26:../Sources/TFC/TFC_Servo.c **** {
 163              		.loc 1 26 0
 164              		.cfi_startproc
 165 0000 90B5     		push	{r4, r7, lr}
 166              	.LCFI6:
 167              		.cfi_def_cfa_offset 12
 168              		.cfi_offset 4, -12
 169              		.cfi_offset 7, -8
 170              		.cfi_offset 14, -4
 171 0002 83B0     		sub	sp, sp, #12
 172              	.LCFI7:
 173              		.cfi_def_cfa_offset 24
 174 0004 00AF     		add	r7, sp, #0
 175              	.LCFI8:
 176              		.cfi_def_cfa_register 7
 177 0006 021C     		mov	r2, r0
 178 0008 3960     		str	r1, [r7]
 179 000a FB1D     		add	r3, r7, #7
 180 000c 1A70     		strb	r2, [r3]
  27:../Sources/TFC/TFC_Servo.c **** 	switch(ServoNumber)
 181              		.loc 1 27 0
 182 000e FB1D     		add	r3, r7, #7
 183 0010 1B78     		ldrb	r3, [r3]
 184 0012 012B     		cmp	r3, #1
 185 0014 11D0     		beq	.L9
  28:../Sources/TFC/TFC_Servo.c **** 	{
  29:../Sources/TFC/TFC_Servo.c **** 	default:
  30:../Sources/TFC/TFC_Servo.c **** 	case 0:
  31:../Sources/TFC/TFC_Servo.c **** 		TPM1_C0V = TPM1_MOD * DutyCycle;
 186              		.loc 1 31 0
 187 0016 134C     		ldr	r4, .L11
 188 0018 124B     		ldr	r3, .L11
 189 001a 9B68     		ldr	r3, [r3, #8]
 190 001c 181C     		mov	r0, r3
 191 001e FFF7FEFF 		bl	__aeabi_ui2f
 192 0022 031C     		add	r3, r0, #0
 193 0024 181C     		add	r0, r3, #0
 194 0026 3968     		ldr	r1, [r7]
 195 0028 FFF7FEFF 		bl	__aeabi_fmul
 196 002c 031C     		add	r3, r0, #0
 197 002e 181C     		add	r0, r3, #0
 198 0030 FFF7FEFF 		bl	__aeabi_f2uiz
 199 0034 031C     		mov	r3, r0
 200 0036 2361     		str	r3, [r4, #16]
  32:../Sources/TFC/TFC_Servo.c **** 		break;
 201              		.loc 1 32 0
 202 0038 11E0     		b	.L7
 203              	.L9:
  33:../Sources/TFC/TFC_Servo.c **** 
  34:../Sources/TFC/TFC_Servo.c **** 	case 1:
  35:../Sources/TFC/TFC_Servo.c **** 		TPM1_C1V = TPM1_MOD * DutyCycle;
 204              		.loc 1 35 0
 205 003a 0A4C     		ldr	r4, .L11
 206 003c 094B     		ldr	r3, .L11
 207 003e 9B68     		ldr	r3, [r3, #8]
 208 0040 181C     		mov	r0, r3
 209 0042 FFF7FEFF 		bl	__aeabi_ui2f
 210 0046 031C     		add	r3, r0, #0
 211 0048 181C     		add	r0, r3, #0
 212 004a 3968     		ldr	r1, [r7]
 213 004c FFF7FEFF 		bl	__aeabi_fmul
 214 0050 031C     		add	r3, r0, #0
 215 0052 181C     		add	r0, r3, #0
 216 0054 FFF7FEFF 		bl	__aeabi_f2uiz
 217 0058 031C     		mov	r3, r0
 218 005a A361     		str	r3, [r4, #24]
  36:../Sources/TFC/TFC_Servo.c **** 		break;
 219              		.loc 1 36 0
 220 005c C046     		mov	r8, r8
 221              	.L7:
  37:../Sources/TFC/TFC_Servo.c **** 	}
  38:../Sources/TFC/TFC_Servo.c **** }
 222              		.loc 1 38 0
 223 005e BD46     		mov	sp, r7
 224 0060 03B0     		add	sp, sp, #12
 225              		@ sp needed for prologue
 226 0062 90BD     		pop	{r4, r7, pc}
 227              	.L12:
 228              		.align	2
 229              	.L11:
 230 0064 00900340 		.word	1073975296
 231              		.cfi_endproc
 232              	.LFE2:
 234              		.comm	ServoTickVar,1,1
 235              		.section	.text.FTM1_IRQHandler,"ax",%progbits
 236              		.align	2
 237              		.global	FTM1_IRQHandler
 238              		.code	16
 239              		.thumb_func
 241              	FTM1_IRQHandler:
 242              	.LFB3:
  39:../Sources/TFC/TFC_Servo.c **** 
  40:../Sources/TFC/TFC_Servo.c **** /******************************************* Function to control Interrupt ************************
  41:../Sources/TFC/TFC_Servo.c **** volatile unsigned char ServoTickVar;
  42:../Sources/TFC/TFC_Servo.c **** 
  43:../Sources/TFC/TFC_Servo.c **** void FTM1_IRQHandler()
  44:../Sources/TFC/TFC_Servo.c **** {
 243              		.loc 1 44 0
 244              		.cfi_startproc
 245 0000 80B5     		push	{r7, lr}
 246              	.LCFI9:
 247              		.cfi_def_cfa_offset 8
 248              		.cfi_offset 7, -8
 249              		.cfi_offset 14, -4
 250 0002 00AF     		add	r7, sp, #0
 251              	.LCFI10:
 252              		.cfi_def_cfa_register 7
  45:../Sources/TFC/TFC_Servo.c **** 	//Clear the overflow mask if set.   According to the reference manual, we clear by writing a logic
  46:../Sources/TFC/TFC_Servo.c **** 	if(TPM1_SC & TPM_SC_TOF_MASK)
 253              		.loc 1 46 0
 254 0004 0C4B     		ldr	r3, .L16
 255 0006 1A68     		ldr	r2, [r3]
 256 0008 8023     		mov	r3, #128
 257 000a 1340     		and	r3, r2
 258 000c 05D0     		beq	.L14
  47:../Sources/TFC/TFC_Servo.c **** 		TPM1_SC |= TPM_SC_TOF_MASK;
 259              		.loc 1 47 0
 260 000e 0A4B     		ldr	r3, .L16
 261 0010 094A     		ldr	r2, .L16
 262 0012 1268     		ldr	r2, [r2]
 263 0014 8021     		mov	r1, #128
 264 0016 0A43     		orr	r2, r1
 265 0018 1A60     		str	r2, [r3]
 266              	.L14:
  48:../Sources/TFC/TFC_Servo.c **** 
  49:../Sources/TFC/TFC_Servo.c **** 	if (ServoTickVar < 0xff)//if servo tick less than 255 count up... 
 267              		.loc 1 49 0
 268 001a 084B     		ldr	r3, .L16+4
 269 001c 1B78     		ldrb	r3, [r3]
 270 001e DBB2     		uxtb	r3, r3
 271 0020 FF2B     		cmp	r3, #255
 272 0022 06D0     		beq	.L13
  50:../Sources/TFC/TFC_Servo.c **** 		ServoTickVar++;
 273              		.loc 1 50 0
 274 0024 054B     		ldr	r3, .L16+4
 275 0026 1B78     		ldrb	r3, [r3]
 276 0028 DBB2     		uxtb	r3, r3
 277 002a 0133     		add	r3, r3, #1
 278 002c DAB2     		uxtb	r2, r3
 279 002e 034B     		ldr	r3, .L16+4
 280 0030 1A70     		strb	r2, [r3]
 281              	.L13:
  51:../Sources/TFC/TFC_Servo.c **** 
  52:../Sources/TFC/TFC_Servo.c **** }
 282              		.loc 1 52 0
 283 0032 BD46     		mov	sp, r7
 284              		@ sp needed for prologue
 285 0034 80BD     		pop	{r7, pc}
 286              	.L17:
 287 0036 C046     		.align	2
 288              	.L16:
 289 0038 00900340 		.word	1073975296
 290 003c 00000000 		.word	ServoTickVar
 291              		.cfi_endproc
 292              	.LFE3:
 294              		.section	.text.TFC_InitServos,"ax",%progbits
 295              		.align	2
 296              		.global	TFC_InitServos
 297              		.code	16
 298              		.thumb_func
 300              	TFC_InitServos:
 301              	.LFB4:
  53:../Sources/TFC/TFC_Servo.c **** 
  54:../Sources/TFC/TFC_Servo.c **** void TFC_InitServos()
  55:../Sources/TFC/TFC_Servo.c **** {
 302              		.loc 1 55 0
 303              		.cfi_startproc
 304 0000 80B5     		push	{r7, lr}
 305              	.LCFI11:
 306              		.cfi_def_cfa_offset 8
 307              		.cfi_offset 7, -8
 308              		.cfi_offset 14, -4
 309 0002 00AF     		add	r7, sp, #0
 310              	.LCFI12:
 311              		.cfi_def_cfa_register 7
  56:../Sources/TFC/TFC_Servo.c **** 
  57:../Sources/TFC/TFC_Servo.c **** 	//Clock Setup for the TPM requires a couple steps.
  58:../Sources/TFC/TFC_Servo.c **** 
  59:../Sources/TFC/TFC_Servo.c **** 
  60:../Sources/TFC/TFC_Servo.c **** 
  61:../Sources/TFC/TFC_Servo.c **** 	//1st,  set the clock mux
  62:../Sources/TFC/TFC_Servo.c **** 	//See Page 124 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  63:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 |= SIM_SOPT2_PLLFLLSEL_MASK;// We Want MCGPLLCLK/2 (See Page 196 of the KL25 Sub-Family 
 312              		.loc 1 63 0
 313 0004 2C4A     		ldr	r2, .L19
 314 0006 2C49     		ldr	r1, .L19
 315 0008 2C4B     		ldr	r3, .L19+4
 316 000a CB58     		ldr	r3, [r1, r3]
 317 000c 8021     		mov	r1, #128
 318 000e 4902     		lsl	r1, r1, #9
 319 0010 1943     		orr	r1, r3
 320 0012 2A4B     		ldr	r3, .L19+4
 321 0014 D150     		str	r1, [r2, r3]
  64:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 &= ~(SIM_SOPT2_TPMSRC_MASK);
 322              		.loc 1 64 0
 323 0016 284A     		ldr	r2, .L19
 324 0018 2749     		ldr	r1, .L19
 325 001a 284B     		ldr	r3, .L19+4
 326 001c C958     		ldr	r1, [r1, r3]
 327 001e 284B     		ldr	r3, .L19+8
 328 0020 1940     		and	r1, r3
 329 0022 264B     		ldr	r3, .L19+4
 330 0024 D150     		str	r1, [r2, r3]
  65:../Sources/TFC/TFC_Servo.c **** 	SIM_SOPT2 |= SIM_SOPT2_TPMSRC(1); //We want the MCGPLLCLK/2 (See Page 196 of the KL25 Sub-Family R
 331              		.loc 1 65 0
 332 0026 244A     		ldr	r2, .L19
 333 0028 2349     		ldr	r1, .L19
 334 002a 244B     		ldr	r3, .L19+4
 335 002c CB58     		ldr	r3, [r1, r3]
 336 002e 8021     		mov	r1, #128
 337 0030 4904     		lsl	r1, r1, #17
 338 0032 1943     		orr	r1, r3
 339 0034 214B     		ldr	r3, .L19+4
 340 0036 D150     		str	r1, [r2, r3]
  66:../Sources/TFC/TFC_Servo.c **** 
  67:../Sources/TFC/TFC_Servo.c **** 
  68:../Sources/TFC/TFC_Servo.c **** 	//Enable the Clock to the FTM0 Module
  69:../Sources/TFC/TFC_Servo.c **** 	//See Page 207 of f the KL25 Sub-Family Reference Manual, Rev. 3, September 2012
  70:../Sources/TFC/TFC_Servo.c **** 	SIM_SCGC6 |= SIM_SCGC6_TPM1_MASK; 
 341              		.loc 1 70 0
 342 0038 1F4A     		ldr	r2, .L19
 343 003a 1F49     		ldr	r1, .L19
 344 003c 214B     		ldr	r3, .L19+12
 345 003e CB58     		ldr	r3, [r1, r3]
 346 0040 8021     		mov	r1, #128
 347 0042 8904     		lsl	r1, r1, #18
 348 0044 1943     		orr	r1, r3
 349 0046 1F4B     		ldr	r3, .L19+12
 350 0048 D150     		str	r1, [r2, r3]
  71:../Sources/TFC/TFC_Servo.c **** 
  72:../Sources/TFC/TFC_Servo.c **** 	//The TPM Module has Clock.  Now set up the peripheral
  73:../Sources/TFC/TFC_Servo.c **** 
  74:../Sources/TFC/TFC_Servo.c **** 	//Blow away the control registers to ensure that the counter is not running
  75:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC = 0;
 351              		.loc 1 75 0
 352 004a 1F4B     		ldr	r3, .L19+16
 353 004c 0022     		mov	r2, #0
 354 004e 1A60     		str	r2, [r3]
  76:../Sources/TFC/TFC_Servo.c **** 	TPM1_CONF = 0;
 355              		.loc 1 76 0
 356 0050 1D4A     		ldr	r2, .L19+16
 357 0052 8423     		mov	r3, #132
 358 0054 0021     		mov	r1, #0
 359 0056 D150     		str	r1, [r2, r3]
  77:../Sources/TFC/TFC_Servo.c **** 
  78:../Sources/TFC/TFC_Servo.c **** 	//While the counter is disabled we can setup the prescaler
  79:../Sources/TFC/TFC_Servo.c **** 
  80:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC = TPM_SC_PS(FTM1_CLK_PRESCALE);
 360              		.loc 1 80 0
 361 0058 1B4B     		ldr	r3, .L19+16
 362 005a 0622     		mov	r2, #6
 363 005c 1A60     		str	r2, [r3]
  81:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC |= TPM_SC_TOIE_MASK; //Enable Interrupts for the Timer Overflow
 364              		.loc 1 81 0
 365 005e 1A4B     		ldr	r3, .L19+16
 366 0060 194A     		ldr	r2, .L19+16
 367 0062 1268     		ldr	r2, [r2]
 368 0064 4021     		mov	r1, #64
 369 0066 0A43     		orr	r2, r1
 370 0068 1A60     		str	r2, [r3]
  82:../Sources/TFC/TFC_Servo.c **** 
  83:../Sources/TFC/TFC_Servo.c **** 	//Setup the mod register to get the correct PWM Period
  84:../Sources/TFC/TFC_Servo.c **** 
  85:../Sources/TFC/TFC_Servo.c **** 	TPM1_MOD = FTM1_CLOCK/(1<<(FTM1_CLK_PRESCALE+1))/FTM1_OVERFLOW_FREQUENCY;
 371              		.loc 1 85 0
 372 006a 174B     		ldr	r3, .L19+16
 373 006c 174A     		ldr	r2, .L19+20
 374 006e 9A60     		str	r2, [r3, #8]
  86:../Sources/TFC/TFC_Servo.c **** 
  87:../Sources/TFC/TFC_Servo.c **** 	//Setup Channels 0 and 1
  88:../Sources/TFC/TFC_Servo.c **** 
  89:../Sources/TFC/TFC_Servo.c **** 	TPM1_C0SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 375              		.loc 1 89 0
 376 0070 154B     		ldr	r3, .L19+16
 377 0072 2822     		mov	r2, #40
 378 0074 DA60     		str	r2, [r3, #12]
  90:../Sources/TFC/TFC_Servo.c **** 	TPM1_C1SC = TPM_CnSC_MSB_MASK | TPM_CnSC_ELSB_MASK;
 379              		.loc 1 90 0
 380 0076 144B     		ldr	r3, .L19+16
 381 0078 2822     		mov	r2, #40
 382 007a 5A61     		str	r2, [r3, #20]
  91:../Sources/TFC/TFC_Servo.c **** 
  92:../Sources/TFC/TFC_Servo.c **** 	//Enable the Counter
  93:../Sources/TFC/TFC_Servo.c **** 
  94:../Sources/TFC/TFC_Servo.c **** 	//Set the Default duty cycle to servo neutral
  95:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServo(0, 0.0);
 383              		.loc 1 95 0
 384 007c 0023     		mov	r3, #0
 385 007e 0020     		mov	r0, #0
 386 0080 191C     		add	r1, r3, #0
 387 0082 FFF7FEFF 		bl	TFC_SetServo
  96:../Sources/TFC/TFC_Servo.c **** 	TFC_SetServo(1, 0.0);
 388              		.loc 1 96 0
 389 0086 0023     		mov	r3, #0
 390 0088 0120     		mov	r0, #1
 391 008a 191C     		add	r1, r3, #0
 392 008c FFF7FEFF 		bl	TFC_SetServo
  97:../Sources/TFC/TFC_Servo.c **** 
  98:../Sources/TFC/TFC_Servo.c **** 	//Enable the TPM COunter
  99:../Sources/TFC/TFC_Servo.c **** 	TPM1_SC |= TPM_SC_CMOD(1);
 393              		.loc 1 99 0
 394 0090 0D4B     		ldr	r3, .L19+16
 395 0092 0D4A     		ldr	r2, .L19+16
 396 0094 1268     		ldr	r2, [r2]
 397 0096 0821     		mov	r1, #8
 398 0098 0A43     		orr	r2, r1
 399 009a 1A60     		str	r2, [r3]
 100:../Sources/TFC/TFC_Servo.c **** 
 101:../Sources/TFC/TFC_Servo.c **** 	//Enable TPM1 IRQ on the NVIC
 102:../Sources/TFC/TFC_Servo.c **** 	enable_irq (INT_TPM1-16);
 400              		.loc 1 102 0
 401 009c 1220     		mov	r0, #18
 402 009e FFF7FEFF 		bl	enable_irq
 103:../Sources/TFC/TFC_Servo.c **** 
 104:../Sources/TFC/TFC_Servo.c **** 	//Enable the FTM functions on the the port
 105:../Sources/TFC/TFC_Servo.c **** 
 106:../Sources/TFC/TFC_Servo.c **** 	PORTB_PCR0 = PORT_PCR_MUX(3);
 403              		.loc 1 106 0
 404 00a2 0B4B     		ldr	r3, .L19+24
 405 00a4 C022     		mov	r2, #192
 406 00a6 9200     		lsl	r2, r2, #2
 407 00a8 1A60     		str	r2, [r3]
 107:../Sources/TFC/TFC_Servo.c **** 	PORTB_PCR1 = PORT_PCR_MUX(3);
 408              		.loc 1 107 0
 409 00aa 094B     		ldr	r3, .L19+24
 410 00ac C022     		mov	r2, #192
 411 00ae 9200     		lsl	r2, r2, #2
 412 00b0 5A60     		str	r2, [r3, #4]
 108:../Sources/TFC/TFC_Servo.c **** 
 109:../Sources/TFC/TFC_Servo.c **** }
 413              		.loc 1 109 0
 414 00b2 BD46     		mov	sp, r7
 415              		@ sp needed for prologue
 416 00b4 80BD     		pop	{r7, pc}
 417              	.L20:
 418 00b6 C046     		.align	2
 419              	.L19:
 420 00b8 00700440 		.word	1074032640
 421 00bc 04100000 		.word	4100
 422 00c0 FFFFFFFC 		.word	-50331649
 423 00c4 3C100000 		.word	4156
 424 00c8 00900340 		.word	1073975296
 425 00cc 4C1D0000 		.word	7500
 426 00d0 00A00440 		.word	1074044928
 427              		.cfi_endproc
 428              	.LFE4:
 430              		.text
 431              	.Letext0:
 432              		.file 2 "F:/CW MCU v10.6/MCU/ARM_GCC_Support/ewl/EWL_C/include/cstdint"
 433              		.file 3 "F:/FreeScale/Projects/TFC_Project/FRDM-TFC/Project_Headers/MKL25Z4.h"
DEFINED SYMBOLS
                            *ABS*:00000000 TFC_Servo.c
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:19     .text.TFC_SetSteeringAngle:00000000 $t
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:24     .text.TFC_SetSteeringAngle:00000000 TFC_SetSteeringAngle
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:72     .text.TFC_SetServo:00000000 TFC_SetServo
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:57     .text.TFC_SetSteeringAngle:00000020 $d
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:67     .text.TFC_SetServo:00000000 $t
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:161    .text.TFC_SetServoDutyCycle:00000000 TFC_SetServoDutyCycle
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:143    .text.TFC_SetServo:00000078 $d
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:156    .text.TFC_SetServoDutyCycle:00000000 $t
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:230    .text.TFC_SetServoDutyCycle:00000064 $d
                            *COM*:00000001 ServoTickVar
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:236    .text.FTM1_IRQHandler:00000000 $t
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:241    .text.FTM1_IRQHandler:00000000 FTM1_IRQHandler
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:289    .text.FTM1_IRQHandler:00000038 $d
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:295    .text.TFC_InitServos:00000000 $t
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:300    .text.TFC_InitServos:00000000 TFC_InitServos
C:\Users\GOLGIR~1\AppData\Local\Temp\ccfGfmav.s:420    .text.TFC_InitServos:000000b8 $d
                     .debug_frame:00000010 $d

UNDEFINED SYMBOLS
__aeabi_fdiv
__aeabi_f2d
__aeabi_dadd
__aeabi_ddiv
__aeabi_dmul
__aeabi_d2f
__aeabi_ui2f
__aeabi_fmul
__aeabi_f2uiz
enable_irq
